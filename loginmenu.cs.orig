using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;

namespace Project_kindergarten
{
    public partial class loginmenu : Form
    {
        #region Private variables
        private TCPConnection serverConnection;
        private bool _dragging;
        private Point _startPoint = new Point(0, 0);
        private int _fullBorderXSize = 677;
        private int _minBorderXSize = 285;
        private const string _remoteServer = "172.20.0.185";

        private MainMenu mainMenu = new MainMenu();
        #endregion

        public loginmenu()
        {
            InitializeComponent();
            this.Show();
            //endast för testning
            //mainMenu.ShowDialog();
        }

        ~loginmenu()
        {
            Application.Exit();
        }

        private string CalculateMD5(string inString)
        {
            System.Security.Cryptography.MD5 md5 = new System.Security.Cryptography.MD5CryptoServiceProvider();
            byte[] inBytes = System.Text.ASCIIEncoding.ASCII.GetBytes(inString);
            byte[] md5hash = md5.ComputeHash(inBytes);

            StringBuilder sb = new StringBuilder();

            for(int i = 0; i < md5hash.Length; i++)
            {
                sb.Append(md5hash[i].ToString("x2"));
            }

            StringBuilder sb2 = new StringBuilder();
            for(int i = 0; i < 20; i++)
            {
                sb2.Append(sb[i]);
            }
            MessageBox.Show(sb2.ToString());
            return sb2.ToString();
        }

        private void loginmenu_Load(object sender, EventArgs e)
        {
            this.MouseDown += new MouseEventHandler(onMouseDown);
            this.MouseUp += new MouseEventHandler(onMouseUp);
            this.MouseMove += new MouseEventHandler(onMouseMove);
            _dragging = false;

            #region Make stuff disappear
            // Set visibility of register menu to false.
            textBox_RegUsrname.Visible = false;
            textBox_RegPw.Visible = false;
            textBox_ConfirmPw.Visible = false;
            textBox_LoginEmail.Visible = false;

            btn_Register1.Visible = false;

            lbl_RegConfPw.Visible = false;
            lbl_RegEmail.Visible = false;
            lbl_RegPw.Visible = false;
            lbl_RegUser.Visible = false;

            pb_Border.Visible = false;
            #endregion
            this.Size = new Size(285, 265);
        }


        #region Windowdragging
        void onMouseMove(object sender, MouseEventArgs e)
        {
            // Change windowlocation if left mouse is pressed
            if (_dragging)
            {
                Point mousePos = new Point(e.X, e.Y);
                Point onScreenCoord = PointToScreen(mousePos);
                this.Location = new Point(onScreenCoord.X - _startPoint.X, onScreenCoord.Y - _startPoint.Y);
            }
        }

        private void onMouseDown(object sender, MouseEventArgs e)
        {
            // If left button, make window draggable
            if (e.Button == System.Windows.Forms.MouseButtons.Left)
            {
                _dragging = true;
                _startPoint = new Point(e.X, e.Y);
            }
        }

        private void onMouseUp(object sender, MouseEventArgs e)
        {
            // If left mousebutton was released, set dragging to false
            if(e.Button == System.Windows.Forms.MouseButtons.Left)
                _dragging = false;
        }

        #endregion


        private void successfulLogin()
        {
            //MessageBox.Show("Success");
            this.Hide();
            UserInfo.PlayerName = this.textBox_Username.Text;
            UserInfo.TcpClient = this.serverConnection;
            mainMenu.Show();
            //serverConnection.Close();
        }

        private void btn_Login_Click(object sender, EventArgs e)
        {
<<<<<<< HEAD
            mainMenu.Show();
            serverConnection = new TCPConnection(System.Net.IPAddress.Parse(_remoteServer));
=======
            serverConnection = new TCPConnection(System.Net.IPAddress.Parse(GrabbarnasIP.ipAddress));
>>>>>>> 579341dc1357623dcbae2a8dc421d155fe032abe
            // Keeping this messagebox, in case I need to disable all this again
            //MessageBox.Show("This section is commented out for testing purpose");
            if (textBox_Username.Text == "" || textBox_Password.Text == "")
            {
                System.Windows.Forms.MessageBox.Show("Enter both username and/or password");
                return;
            }
            string sendData = Flags.LOGIN_REQUEST + textBox_Username.Text + '\\' + CalculateMD5(textBox_Password.Text);
            //System.Windows.Forms.MessageBox.Show(textBox_Username.ToString());
            string rcvData;
            
            serverConnection.Send(sendData);
            

            int sleepTime = 0;

            do
            {
                System.Threading.Thread.Sleep(50);
                sleepTime += 50;
                serverConnection.Receive(out rcvData);
            } while (sleepTime <= 5000 && rcvData == string.Empty);

            bool DropConnection = true;

            if (rcvData == string.Empty)
            {
                MessageBox.Show("Connection dropped, try again later");
                return;
            }
            else
            {
                switch (rcvData[0])
                {
                    case 'G':
                        MessageBox.Show("Login failed, please try again later");
                        break;
                    case 'H':
                        MessageBox.Show("User already logged in");
                        break;
                    case 'I':
                        MessageBox.Show("Wrong username and/or password");
                        break;
                    case 'J':
                        MessageBox.Show("User not registered");
                        break;
                    case 'K':
                        serverConnection.Close();
                        userVerification();
                        break;
                    default:
                        DropConnection = false;
                        break;
                }
            }

            if (DropConnection)
            {
                serverConnection.Close();
                return;
            }

            // User successfully logged in
            successfulLogin();
        }

        private bool isValidRegister()
        {
            // Check so both passwords are correct and not empty
            if (string.IsNullOrEmpty(textBox_RegPw.Text))
            {
                System.Windows.Forms.MessageBox.Show("Enter password.");
                return false;
            }
            // Compare regpw + confirmation pw
            if (textBox_RegPw.Text.CompareTo(textBox_ConfirmPw.Text) != 0)
            {
                System.Windows.Forms.MessageBox.Show("Password mismatch.");
                return false;
            }
            // check for valid username
            if (string.IsNullOrEmpty(textBox_RegUsrname.Text))
            {
                System.Windows.Forms.MessageBox.Show("Enter a username.");
                return false;
            }
            // check for invalid characters in loginmail/usrname/pw
            //if (textBox_LoginEmail.Text.Contains('@'))
            //{
            //    System.Windows.Forms.MessageBox.Show("Don't use '@' in mail >:(");
            //    return false;
            //}

            if (textBox_ConfirmPw.Text.Contains('\\') || textBox_RegPw.Text.Contains('\\') || textBox_RegUsrname.Text.Contains('\\'))
            {
                System.Windows.Forms.MessageBox.Show("Don't use '\\' in password or username");
                return false;
            }

            return true;
        }

        private void clearRegisterFields()
        {
            textBox_ConfirmPw.Clear();
            textBox_LoginEmail.Clear();
            textBox_RegPw.Clear();
            textBox_RegUsrname.Clear();
        }

        private void btn_Register1_Click(object sender, EventArgs e)
        {
            if (!isValidRegister())
            {
                clearRegisterFields();
                return;
            }
            
            //System.Windows.Forms.MessageBox.Show("3" + '\\' + textBox_RegUsrname.Text + '\\' +
            //    textBox_RegPw.Text + '\\' + textBox_LoginEmail.Text);

            StringBuilder str = new StringBuilder();
            str.Append(Flags.REGISTER_REQUEST); /*str.Append("\\");*/ str.Append(textBox_RegUsrname.Text);
            str.Append("\\"); str.Append(CalculateMD5(textBox_RegPw.Text)); str.Append("\\"); str.Append(textBox_LoginEmail.Text);

            string sendData = str.ToString();

            //string sendData = Flags.REGISTER_REQUEST + '\\' + textBox_RegUsrname.Text + '\\' +
                                //textBox_RegPw.Text + '\\' + textBox_LoginEmail.Text;

            //System.Windows.Forms.MessageBox.Show(sendData);

            serverConnection = new TCPConnection(System.Net.IPAddress.Parse(GrabbarnasIP.ipAddress));

            serverConnection.Send(sendData);
            string retVal = string.Empty;
            if (!serverConnection.IsConnected())
            {
                //MessageBox.Show("dropped connection");
                return;
            }
            //System.Threading.Thread.Sleep(100);
            //serverConnection.Receive(out retVal);
            
            int sleepTime = 0;

            // Retry to receive an answer from server for 5 seconds
            do
            {
                serverConnection.Receive(out retVal);
                System.Threading.Thread.Sleep(50);
                sleepTime += 50;
            }while(retVal == string.Empty && sleepTime <= 5000);

            serverConnection.Close();
            serverConnection = null;
            
            if(retVal == string.Empty)
            {
                MessageBox.Show("Failed to register");
                return;
            }

            if(retVal == Flags.USER_REGISTRATION_SUCCESS)
            {
                MessageBox.Show("Registration completed!");
            }
            else if(retVal == Flags.USER_REGISTRATION_FAILED)
            {
                MessageBox.Show("Registration failed");
            }
            else if(retVal == Flags.USER_NAME_NOT_AVAILABLE)
            {
                MessageBox.Show("Username already in use");
            }
        }

        private void btn_Exit_Click(object sender, EventArgs e)
        {
            if(serverConnection != null)
                serverConnection.Close();
            Application.Exit();
        }

        private void showRegObjects()
        {
            clearRegisterFields();
            // Set visibility of register menu to true
            // Textboxes
            textBox_RegUsrname.Visible =   true;
            textBox_RegPw.Visible =        true;
            textBox_ConfirmPw.Visible =    true;
            textBox_LoginEmail.Visible =   true;
            // Button
            btn_Register1.Visible =        true;
            // Labels
            lbl_RegConfPw.Visible =        true;
            lbl_RegEmail.Visible =         true;
            lbl_RegPw.Visible =            true;
            lbl_RegUser.Visible =          true;
            // Border
            pb_Border.Visible =            true;
            //pb_Border.Update();

            // Set size so we can see it again
            for (int i = this.Size.Width; i <= _fullBorderXSize; i += 3)
            {
                this.Size = new Size(i, this.Size.Height);
            }
        }

        private void btn_Register_Click(object sender, EventArgs e)
        {
            // do it in a thread to avoid a bug I can't solve.
            //System.Threading.Thread th = new System.Threading.Thread(showRegObjects);
            showRegObjects();
            //th.Start();
        }
        
        private void btn_Close_Click(object sender, EventArgs e)
        {
            // Set size so we cannot see it again.
            for (int i = this.Size.Width; i >= _minBorderXSize; i -= 3)
            {
                Size = new Size(i, this.Size.Height);
            }
            
            // Set visibility of register menu to false.
            textBox_RegUsrname.Visible = false;
            textBox_RegPw.Visible = false;
            textBox_ConfirmPw.Visible = false;
            textBox_LoginEmail.Visible = false;

            btn_Register1.Visible = false;

            lbl_RegConfPw.Visible = false;
            lbl_RegEmail.Visible = false;
            lbl_RegPw.Visible = false;
            lbl_RegUser.Visible = false;

            pb_Border.Visible = false;
        }

        private void loginmenuKeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Escape)
            {
                Application.Exit();
            }
        }

        private void userVerification()
        {

            VerifyUser vu = new VerifyUser(System.Net.IPAddress.Parse(GrabbarnasIP.ipAddress), textBox_Username.Text);
            vu.ShowDialog();

            bool userVerified = vu.IsVerified;

            vu = null;

            if (userVerified)
            {
                MessageBox.Show("User is now verified");
                return;
            }
            else
            {
                MessageBox.Show("User verification failed");
            }
        }
    }
}